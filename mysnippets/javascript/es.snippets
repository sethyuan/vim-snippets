# ECMA5 snippets

snippet use "use strict" b
"use strict"

endsnippet

snippet fun "function"
function ${1:function_name}($2) {
	${VISUAL}$0
}
endsnippet

snippet fn "anonymous function" i
function$1($2) {${VISUAL}$0}
endsnippet

snippet ifs "if: single line" b
if (${1:condition}) ${VISUAL}$0
endsnippet

snippet if "if" b
if (${1:condition}) {
	${VISUAL}$0
}
endsnippet

snippet ife "if else" b
if (${1:condition}) {
	${VISUAL}$0
} else {
}
endsnippet

snippet for "for" b
for (let ${1:i} = 0; $1 < ${2:len}; $1++) {
	${VISUAL}$0
}
endsnippet

snippet forof "for of" b
for (let ${1:item} of ${2:coll}) {
	${VISUAL}$0
}
endsnippet

snippet forin "for in" b
for (let ${1:key} in ${2:obj}) {
	${VISUAL}$0
}
endsnippet

snippet forr "for reversed" b
for (let ${1:i} = ${2:len - 1}; $1 >= 0; $1--) {
	${VISUAL}$0
}
endsnippet

snippet try "try catch" b
try {
	${VISUAL}$0
} catch (e) {
}
endsnippet

snippet tryf "try finally" b
try {
	${VISUAL}$0
} finally {
}
endsnippet

snippet trycf "try catch finally" b
try {
	${VISUAL}$0
} catch (e) {
} finally {
}
endsnippet

snippet proto "Prototype (proto)" b
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
	${VISUAL}$0
}

endsnippet

# Snippets for Console Debug Output

snippet cl "console.log"
console.log(${1:"${2:value}"})
endsnippet

snippet cw "console.warn"
console.warn(${1:"${2:value}"})
endsnippet

snippet ce "console.error"
console.error(${1:"${2:value}"})
endsnippet

snippet ctime "console.time"
console.time("${1:label}")
${VISUAL}$0
console.timeEnd("$1")
endsnippet

# Node.js require snippets

snippet re "require an module"
require("$1")$0
endsnippet

snippet req "require an module"
require("$1")$0
endsnippet

snippet ff "arrow function" i
(${1:x}) => ${2:{${VISUAL}$3}}
endsnippet

snippet fun* "generator function"
function* ${1:foo}($2) {
	${VISUAL}$0
}
endsnippet

snippet afun "async function" b
async function ${1:function_name}($2) {
	${VISUAL}$0
}
endsnippet

snippet ffa "async arrow function" i
async (${1:x}) => ${2:{${VISUAL}$3}}
endsnippet

snippet des "destructuring statement" b
const { ${2:x} } = ${1:this.props}$0
endsnippet

snippet fea "Closed function evaluation"
;(async (${1:argument}) => {
	${VISUAL}$0
})(${2:$1})
endsnippet

# Common snippets

snippet st "setTimeout ES6"
setTimeout(${2:() => {
	${VISUAL}$0
}}, ${1:100})
endsnippet

snippet si "setInterval ES6"
setInterval(${2:() => {
	${VISUAL}$0
}}, ${1:100})
endsnippet

# Module snippets

snippet exp "export" b
export ${VISUAL}$0
endsnippet

snippet ed "export default" b
export default ${VISUAL}$0
endsnippet

# vim:ft=snippets:
