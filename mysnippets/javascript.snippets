# JavaScript snippets

snippet use "use strict" !b
"use strict";

endsnippet

snippet fun "function"
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet f "anonymous function"
function${1: function_name}(${2:argument}) {${VISUAL}$0}
endsnippet

snippet (f "Closed function evaluation"
(function(${1:argument}) {
	${VISUAL}$0
}(${2:$1}));
endsnippet

snippet if "if" b
if (${1:condition}) {
	${VISUAL}$0
}
endsnippet

snippet ife "if else" b
if (${1:condition}) {
	${2}
} else {
	${3}
}
endsnippet

snippet for "for" b
for (var ${1:i} = 0; $1 < ${2:${3:Things}.length}; $1++) {
	${VISUAL}$0
}
endsnippet

snippet forr "for reversed" b
for (var ${1:i} = ${2:${3:Things}.length} - 1; $1 >= 0; $1--) {
	${VISUAL}$0
}
endsnippet

snippet try "try catch" b
try {
	${VISUAL}$0
} catch (err) {
	${1:console.error(err);}
}
endsnippet

snippet tryf "try finally" b
try {
	${VISUAL}$0
} finally {
	${1:console.log("finally");}
}
endsnippet

snippet trycf "try catch finally" b
try {
	${VISUAL}$0
} catch (err) {
	${1:console.error(err);}
} finally {
	${2:console.log("finally");}
}
endsnippet

snippet proto "Prototype (proto)" b
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
	${VISUAL}$0
};

endsnippet

# Snippets for Console Debug Output

snippet cl "console.log"
console.log(${1:"${2:value}"});
endsnippet

snippet cw "console.warn"
console.warn(${1:"${2:value}"});
endsnippet

snippet ce "console.error"
console.error(${1:"${2:value}"});
endsnippet

snippet ctime "console.time"
console.time("${1:label}");
${VISUAL}$0
console.timeEnd("$1");
endsnippet

# Node.js require snippets

snippet re "require an AMD module"
var $1 = require("${2:$1}")$3;$0
endsnippet

# vim:ft=snippets:
